//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#ifndef _WXCUSTOMCONTROLS_SRC_WXCRAFTER_BASE_CLASSES_H
#define _WXCUSTOMCONTROLS_SRC_WXCRAFTER_BASE_CLASSES_H

// clang-format off
#include <wx/settings.h>
#include <wx/xrc/xmlres.h>
#include <wx/xrc/xh_bmp.h>
#include <wx/frame.h>
#include <wx/iconbndl.h>
#include <wx/artprov.h>
#include <wx/sizer.h>
#include <wx/panel.h>
#include <wx/toolbar.h>
#include "clToolBar.h"
#include "clSideBarCtrl.hpp"
#include <wx/dataview.h>
#include "clDataViewListCtrl.h"
#include <wx/button.h>
#include "clButton.h"
#include <wx/choice.h>
#include <wx/arrstr.h>
#include "clChoice.h"
#include <wx/combobox.h>
#include "clComboBox.hpp"
#include <wx/textctrl.h>
#include <wx/menu.h>
#include <wx/imaglist.h>
#include <wx/bitmap.h>
#include <map>
#include <wx/icon.h>
#if wxVERSION_NUMBER >= 2900
#include <wx/persist.h>
#include <wx/persist/toplevel.h>
#include <wx/persist/bookctrl.h>
#include <wx/persist/treebook.h>
#endif

#ifdef WXC_FROM_DIP
#undef WXC_FROM_DIP
#endif
#if wxVERSION_NUMBER >= 3100
#define WXC_FROM_DIP(x) wxWindow::FromDIP(x, NULL)
#else
#define WXC_FROM_DIP(x) x
#endif

// clang-format on

class MainFrameBaseClass : public wxFrame
{
public:
    enum {
        ID_SHOW_SB_ON_FOCUS = 10001,
        ID_HIDE_ROOT = 10002,
        ID_TOGGLE_THEMES = 10003,
        ID_DV_DELETE_ALL_ITEMS = 10004,
        ID_FILL_WITH_5000_ENTRIES = 10005,
        ID_PG_UP = 10006,
        ID_DV_OPEN_FOLDER = 10007,
        ID_PREV_SIBLING = 10008,
        ID_SINGLE_SELECTION = 10009,
        ID_NEXT_SIBLING = 10010,
        ID_ZEBRA = 10011,
        wxID_SET_TREE_COL_WIDTH = 10012,
        ID_SELECT_CHILDREN = 10013,
        ID_NATIVE_HEADER = 10014,
        ID_EXPAND_ALL = 10015,
        ID_OPEN_FOLDER = 10016,
        wxID_COLOURS = 10017,
        ID_NEVER_SHOW_SCROLLBARS = 10018,
        ID_PG_DOWN = 10019,
        wxID_BOOKMARK = 10020,
    };

protected:
    wxPanel* m_mainPanel;
    clToolBar* m_toolbar;
    wxPanel* m_panelControls;
    clSideBarCtrl* m_sidebar;
    clDataViewListCtrl* m_dataView;
    wxPanel* m_panelButtons;
    clButton* m_buttonOne;
    clButton* m_buttonTwo;
    clButton* m_buttonDisabled;
    clChoice* m_choice;
    clComboBox* m_comboBox;
    clButton* m_buttonAction;
    wxTextCtrl* m_textCtrlLog;
    wxMenuBar* m_myMenuBar;
    wxMenu* menu_clTreeCtrl;
    wxMenuItem* m_menuItem13;
    wxMenuItem* m_separator1;
    wxMenuItem* m_menuItemExpandAll;
    wxMenuItem* m_menuItemCollapseAll;
    wxMenuItem* m_menuItemFirstVisible;
    wxMenuItem* m_menuItemNextVisibleItem;
    wxMenuItem* m_menuItemEnsureVisible;
    wxMenuItem* m_menuItemSelectChildren;
    wxMenuItem* m_menuItemNextSibling;
    wxMenuItem* m_menuItemPrevSibling;
    wxMenuItem* m_menuItemDeleteAllItems;
    wxMenuItem* m_separator3;
    wxMenuItem* m_menuItemFind;
    wxMenuItem* m_menuItemSetWidth;
    wxMenuItem* m_separator2;
    wxMenuItem* m_menuItemExit;
    wxMenu* menu_clDataViewListCtrl;
    wxMenuItem* m_menuItem83;
    wxMenuItem* m_menuItem87;
    wxMenuItem* m_menuItem89;
    wxMenuItem* m_menuItem145;
    wxMenuItem* m_menuItem147;
    wxMenuItem* m_menuItem149;
    wxMenuItem* m_menuItem151;
    wxMenuItem* m_menuItem153;
    wxMenu* menu_Style;
    wxMenuItem* m_menuItemZebra;
    wxMenuItem* m_menuItemThemes;
    wxMenuItem* m_menuItemHideRoot;
    wxMenuItem* m_menuItem67;
    wxMenuItem* m_menuItemSingleSelection;
    wxMenuItem* m_menuItemShowSBOnFocus;
    wxMenuItem* m_menuItemHideHeaders;
    wxMenuItem* m_menuItemNativeHeader;
    wxMenuItem* m_menuItemSupportSearch;
    wxMenuItem* m_menuItem155;
    wxMenu* m_menu163;
    wxMenuItem* m_menuItem165;
    wxMenuItem* m_menuItem173;
    wxMenuItem* m_menuItem167;
    wxMenuItem* m_menuItem169;
    wxMenuItem* m_menuItem171;

protected:
    virtual void OnColoursUI(wxUpdateUIEvent& event) { event.Skip(); }
    virtual void OnCloseFolderUI(wxUpdateUIEvent& event) { event.Skip(); }
    virtual void OnButtonCloseFolder(wxCommandEvent& event) { event.Skip(); }
    virtual void OnButtonClicked(wxCommandEvent& event) { event.Skip(); }
    virtual void OnChoice(wxCommandEvent& event) { event.Skip(); }
    virtual void OnOpenFolder(wxCommandEvent& event) { event.Skip(); }
    virtual void OnExpandAll(wxCommandEvent& event) { event.Skip(); }
    virtual void OnCollapseAll(wxCommandEvent& event) { event.Skip(); }
    virtual void OnFirstVisible(wxCommandEvent& event) { event.Skip(); }
    virtual void OnNextVisible(wxCommandEvent& event) { event.Skip(); }
    virtual void OnEnsureItemVisible(wxCommandEvent& event) { event.Skip(); }
    virtual void OnSelectChildren(wxCommandEvent& event) { event.Skip(); }
    virtual void OnNextSibling(wxCommandEvent& event) { event.Skip(); }
    virtual void OnPrevSibling(wxCommandEvent& event) { event.Skip(); }
    virtual void OnDeleteAllItems(wxCommandEvent& event) { event.Skip(); }
    virtual void OnTreeFind(wxCommandEvent& event) { event.Skip(); }
    virtual void OnSetTreeColWidth(wxCommandEvent& event) { event.Skip(); }
    virtual void OnExit(wxCommandEvent& event) { event.Skip(); }
    virtual void OnDVOpenFolder(wxCommandEvent& event) { event.Skip(); }
    virtual void OnFillWith500Entries(wxCommandEvent& event) { event.Skip(); }
    virtual void OnDVDeleteAllItems(wxCommandEvent& event) { event.Skip(); }
    virtual void OnLineUp(wxCommandEvent& event) { event.Skip(); }
    virtual void OnLineDown(wxCommandEvent& event) { event.Skip(); }
    virtual void OnPgUp(wxCommandEvent& event) { event.Skip(); }
    virtual void OnPgDown(wxCommandEvent& event) { event.Skip(); }
    virtual void OnZebraColouring(wxCommandEvent& event) { event.Skip(); }
    virtual void OnToggleTheme(wxCommandEvent& event) { event.Skip(); }
    virtual void OnHideRoot(wxCommandEvent& event) { event.Skip(); }
    virtual void OnSingleSelection(wxCommandEvent& event) { event.Skip(); }
    virtual void OnShowSBOnFocus(wxCommandEvent& event) { event.Skip(); }
    virtual void OnHideHeaders(wxCommandEvent& event) { event.Skip(); }
    virtual void OnNativeHeader(wxCommandEvent& event) { event.Skip(); }
    virtual void OnMenuitemsupportsearchMenuSelected(wxCommandEvent& event) { event.Skip(); }
    virtual void OnHideScrollbars(wxCommandEvent& event) { event.Skip(); }
    virtual void OnCaptionBarToggleMenuButton(wxCommandEvent& event) { event.Skip(); }
    virtual void OnCaptionBarToggleCloseButton(wxCommandEvent& event) { event.Skip(); }
    virtual void OnShowMaximizeButton(wxCommandEvent& event) { event.Skip(); }
    virtual void OnShowMinimizeButton(wxCommandEvent& event) { event.Skip(); }

public:
    clToolBar* GetToolbar() { return m_toolbar; }
    clSideBarCtrl* GetSidebar() { return m_sidebar; }
    clDataViewListCtrl* GetDataView() { return m_dataView; }
    wxPanel* GetPanelControls() { return m_panelControls; }
    clButton* GetButtonOne() { return m_buttonOne; }
    clButton* GetButtonTwo() { return m_buttonTwo; }
    clButton* GetButtonDisabled() { return m_buttonDisabled; }
    clChoice* GetChoice() { return m_choice; }
    clComboBox* GetComboBox() { return m_comboBox; }
    clButton* GetButtonAction() { return m_buttonAction; }
    wxPanel* GetPanelButtons() { return m_panelButtons; }
    wxTextCtrl* GetTextCtrlLog() { return m_textCtrlLog; }
    wxPanel* GetMainPanel() { return m_mainPanel; }
    wxMenuBar* GetMyMenuBar() { return m_myMenuBar; }
    MainFrameBaseClass(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = _("My Frame"),
                       const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(-1, -1),
                       long style = wxRESIZE_BORDER);
    virtual ~MainFrameBaseClass();
};

class MyImages : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;

protected:
public:
    MyImages();
    const wxBitmap& Bitmap(const wxString& name) const
    {
        if(!m_bitmaps.count(name + m_resolution))
            return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString& res = wxEmptyString) { m_resolution = res; }

    virtual ~MyImages();
};

#endif
